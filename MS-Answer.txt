1. 参考答案及解析：South。
知识点：iota 的用法、类型的 String() 方法。
根据 iota 的用法推断出 South 的值是 3；另外，如果类型定义了 String() 方法，当使用 fmt.Printf()、fmt.Print() 和 fmt.Println() 会自动使用 String() 方法，实现字符串的打印

2.参考答案及解析：B，编译报错 cannot assign to struct field m["foo"].x in map。
  错误原因：对于类似 X = Y的赋值操作，必须知道 X 的地址，才能够将 Y 的值赋给 X，但 go 中的 map 的 value 本身是不可寻址的。

  有两个解决办法：

  1.使用临时变量

  type Math struct {
      x, y int
  }

  var m = map[string]Math{
      "foo": Math{2, 3},
  }

  func main() {
      tmp := m["foo"]
      tmp.x = 4
      m["foo"] = tmp
      fmt.Println(m["foo"].x)
  }
  2.修改数据结构

  type Math struct {
      x, y int
  }

  var m = map[string]*Math{
      "foo": &Math{2, 3},
  }

  func main() {
      m["foo"].x = 4
      fmt.Println(m["foo"].x)
      fmt.Printf("%#v", m["foo"])   // %#v 格式化输出详细信息
  }
  
3. 参考答案及解析：0 1 1 2。知识点：iota 的用法。
iota 是 golang 语言的常量计数器，只能在常量的表达式中使用。
iota 在 const 关键字出现时将被重置为0，const中每新增一行常量声明将使 iota 计数一次

4. 参考答案及解析：s is nil 和 p is not nil。
  这道题会不会有点诧异，我们分配给变量 p 的值明明是 nil，然而 p 却不是 nil。
  记住一点，当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。
  上面的代码，给变量 p 赋值之后，p 的动态值是 nil，但是动态类型却是 *Student，是一个 nil 指针，所以相等条件不成立。

5. 参考答案及解析：B
  基于类型创建的方法必须定义在同一个包内，上面的代码基于 int 类型创建了 PrintInt() 方法，由于 int 类型和方法 PrintInt() 定义在不同的包内，所以编译出错。

  解决的办法可以定义一种新的类型：
  
  type Myint int
  func (i Myint) PrintInt ()  {
      fmt.Println(i)
  }
  func main() {
      var i Myint = 1
      i.PrintInt()
  } 
  
6.  参考答案及解析：B。编译错误 Student does not implement People (Speak method has pointer receiver)，
    值类型 Student 没有实现接口的 Speak() 方法，而是指针类型 *Student 实现该方法

7. 参考答案及解析：A 声明的是 nil 切片；B 声明的是长度和容量都为 0 的空切片。第一种切片声明不会分配内存，优先选择
8. 参考答案及解析：BD
	函数参数为 interface{} 时可以接收任何类型的参数，包括用户自定义类型等，即使是接收指针类型也用 interface{}，而不是使用 *interface{}。
	注意： *interface{} 是接口指针，它接收的参数必须是接口变量的地址
	func main() {
		var myinterface interface{}
		s := S{}
		p := &s
		myinterface = p
		f(s) //A
		f(p) //C
		g(&myinterface) //D
	}
	下面这样虽然可编译，但不建议用：永远不要使用一个指针指向一个接口类型，因为它已经是一个指针
	type i interface{
	}
	type S struct {
	}

	func f(x interface{}) {
	}

	func g(x *i) {
	}

	func main() {
		var myinterface i
		s := S{}
		p := &s
		myinterface = p
		f(s) //A
		// g(s) //B
		f(p) //C
		g(&myinterface) //D
	}
  
9. A. &S{"foo"} 
  B. *f() 或者 f()
  f() 函数返回参数是指针类型，所以可以用 & 取结构体的指针；B 处，如果填 *f()，则 p 是 S 类型；如果填 f()，则 p 是 *S 类型，不过都可以使用 p.m 取得结构体的成员
10. 参考答案及解析：两个地方有语法问题。golang 的字符串类型是不能赋值 nil 的，也不能跟 nil 比较

11. 参考答案及解析：2 1。defer关键字后面的函数或者方法想要执行必须先注册，return 之后的 defer 是不能注册的， 也就不能执行后面的函数或方法
12. 参考答案及解析：A。知识点：代码块和变量作用域。这里 a 和 b 作用域只适用于该 if...else if ... else 语句。 
	特殊之处：
	if a:=f(); true{
	} else if b:=f2(); false{
	} else {	// 变量声名只能在 if 关键字之后，只后一个 else 不能声名变量
	}
13. map 的输出是无序的
14. 参考答案及解析：
        10 1 2 3
        20 0 2 2
        2 0 2 2
        1 1 3 4
    注册 defer 函数时，参数就已确定(闭包除外)，如果参数是表达式或函数，也会在注册时执行，调用时即直接运行    
    程序执行到 main() 函数第三行代码的时候，会先执行 calc() 函数的 b 参数，即：calc("10",a,b)，输出：10 1 2 3，得到值 3，
    因为defer 定义的函数是延迟函数，故 calc("1",1,3) 会被延迟执行；
    程序执行到第五行的时候，同样先执行 calc("20",a,b) 输出：20 0 2 2 得到值 2，同样将 calc("2",0,2) 延迟执行；
    程序执行到末尾的时候，按照栈先进后出的方式依次执行：calc("2",0,2)，calc("1",1,3)，则就依次输出：2 0 2 2，1 1 3 4

16. 参考答案及解析：B。编译错误 Student does not implement People (Speak method has pointer receiver)，
    值类型 Student 没有实现接口的 Speak() 方法，而是指针类型 *Student 实现该方法

17. 参考答案及解析：

    r =  [1 2 3 4 5]
    a =  [1 12 13 4 5]
    range 表达式是副本参与循环，就是说例子中参与循环的是 a 的副本，而不是真正的 a。就这个例子来说，假设 b 是 a 的副本，则 range 循环代码是这样的：

    for i, v := range b {
        if i == 0 {
            a[1] = 12
            a[2] = 13
        }
        r[i] = v
    }
    因此无论 a 被如何修改，其副本 b 依旧保持原值，并且参与循环的是 b，因此 v 从 b 中取出的仍旧是 a 的原值，而非修改后的值。

    如果想要 r 和 a 一样输出，修复办法：

    func main() {
        var a = [5]int{1, 2, 3, 4, 5}
        var r [5]int

        for i, v := range &a {
            if i == 0 {
                a[1] = 12
                a[2] = 13
            }
            r[i] = v
        }
        fmt.Println("r = ", r)
        fmt.Println("a = ", a)
    }
    输出：

    r =  [1 12 13 4 5]
    a =  [1 12 13 4 5]
    修复代码中，使用 *[5]int 作为 range 表达式，其副本依旧是一个指向原数组 a 的指针，因此后续所有循环中均是 &a 指向的原数组亲自参与的，因此 v 能从 &a 指向的原数组中取出 a 修改后的值

  对比程序 ：
  func main() {
	var a = []int{1, 2, 3, 4, 5}
	var r [5]int

	for i, v := range a {
		if i == 0 {
			a[1] = 12
			a[2] = 13
		}
		r[i] = v
	}
	fmt.Println("r = ", r)
	fmt.Println("a = ", a)
}

输出 ：
r =  [1 12 13 4 5]
a =  [1 12 13 4 5]
这的 a 是一个切片，那切片是怎么实现的呢？切片在 go 的内部结构有一个指向底层数组的指针，
当 range 表达式发生复制时，副本的指针依旧指向原底层数组，所以对切片的修改都会反应到底层数组上，所以通过 v 可以获得修改后的数组元素。

18. 参考答案及解析：C。
	1. map底层是一个数据结构，数据结构中有存放指向数据的指针。for ... range ..中，复制的是map结构体，但是结构体内指向数据的指针并未发生变化，所以在 for range 中修改map 元素的值，会影响到所有该map变量。还要注意 map 不是线程安全的，操作时一定要加锁
	2. for range map 是无序的，如果第一次循环到 A，则输出 3；否则输出 2

19. 参考答案及解析：

[1 2 0 0 0]
[1 2 3 0 0]
知识点：可变函数、append()操作。Go 提供的语法糖...，可以将 slice 传进可变函数，
不会创建新的切片。第一次调用 change() 时，append() 操作使切片底层数组发生了扩容，原 slice 的底层数组不会改变；
第二次调用change() 函数时，使用了操作符[i,j]获得一个新的切片，假定为 slice1，它的底层数组和原切片底层数组是重合的，
不过 slice1 的长度、容量分别是 2、5，所以在 change() 函数中对 slice1 底层数组的修改会影响到原切片

注意： 切片作为参数向 可变长参数函数传递 如果 ...

20. 参考答案及解析：C
recover() 必须在 defer 闭包 函数中 直接 调用才有效。
面其他几种情况调用都是 无效 的：
	1. 直接调用   defer recover()
	2. 非闭包调用 defer fmt.Println(recover()) 
	3. defer嵌套调用 
		defer func(){
			defer func(){
				fmt.Println(recover())	// 捕获不到panic(1) 可以捕获到 panic(2)，闭包特性
			}()
			panic(2)
		}()
		panic(1)
recover() 功能：捕获并反回 panic信息；当前函数返回后，继续执行下面的函数，程序不会中断		
注意：recover()只是无效，但可编译执行，只是 为nil值，捕获不到panic信息
21. 参考答案及解析：21
recover() 必须在 defer 闭包中调用才有效，所以第 9 行代码捕获是无效的。
引自《Go语言101》

22-1. 12
22-2. 答案：
	打印后
	触发异常11
	打印中
	触发异常22
	<nil>
	打印前
	func defer_call2
      解析：
      如果 panic 消息在该 defer 中未被捕获，那么 该defer 中的 panic 将替代之前的panic 消息

23. 输出：1 5 1
24. 参考答案及解析：A。知识点：多重赋值
	多重赋值分为两个步骤，有先后顺序：从左至右，先计算等号左边的索引表达式和取址表达式，后计算等号右边的表达式；
	赋值顺序：从左至右挨个为变量赋值
	所以本例，会先计算 s[i-1]，等号右边是两个表达式是常量，所以赋值运算等同于 i, s[0] = 2, "Z"
    对比
    
    func main() {
	i := 2
	s := []string{"A", "B", "C"}
	i, s[i-1], s[i-1] = 1, "1", "2"
	fmt.Println(i, s)
     }
     输出：1 [A 2 C]
25. 参考答案及解析：AD
	知识点：自增自减操作。
	i++ 和 i-- 在 Go 语言中是语句，不是表达式，因此不能赋值给另外的变量。此外没有 ++i 和 --i
	
	下面代码编译会报错，为什么？
	 func main() {
		i := 2
		s := []string{"A", "B", "C"}
		s[i--] = "2"
		fmt.Println(s)
	}
	切片下标中的变量，不能进行自增，自减运算，也是因为 自增、自减是语句，只能独立使用
	
26. 参考答案及解析：能，输出m1 m2，第 2 行代码基于类型 User 创建了新类型 User1，第 3 行代码是创建了 User 的类型别名 User2，
	注意使用 = 定义类型别名。因为 User2 是别名，完全等价于 User，所以 User2 具有 User 所有的方法。但是 i1.m2() 是不能执行的，
	因为 User1 没有定义该方法
27.参考答案及解析：012。注意区别下面代码段：

	func main() {
	    x := []string{"a", "b", "c"}
	    for _, v := range x {
		fmt.Print(v)     //输出 abc
	    }
	}
29. 参考答案及解析：编译报错cannot take the address of i。
	知识点：常量。常量不同于变量的在运行期分配内存，常量通常会被编译器在预处理阶段直接展开，作为指令数据使用，所以常量无法寻址	

30. 参考答案及解析：程序抛异常。先定义下，第一个协程为 A 协程，第二个协程为 B 协程；当 A 协程还没起时，主协程已经将 channel 关闭了，当 A 协程往关闭的 channel 发送数据时会 panic，panic: send on closed channel

31. 有方向的channle不可能被关闭

32. 参考答案及解析：存在两个问题：1.map 需要初始化才能使用；2.指针不支持索引。
	修复代码如下：

	func main() {
	    s := new(Show)
	    // 修复代码
	    p := make(Param)
	    p["day"] = 2
	    s.Param = &p
	    tmp := *s.Param
	    fmt.Println(tmp["day"])
	}

33. 参考答案及解析：输出[1 0 2 3]，
	字面量初始化切片时候，可以指定索引，没有指定索引的元素会在前一个索引基础之上加一，所以输出[1 0 2 3]，而不是[1 3 2]
34. syntax error: unexpected semicolon or newline before {
	Go 语言中，大括号不能放在单独的一行

35. 参考答案及解析：运行时错误。如果类型实现 String() 方法，当格式化输出时会自动使用 String() 方法。
	 fmt.Sprintf将调用String(),导致无限递归，最后栈溢出，报错

36. 参考答案及解析：变量 one、two 和 three 声明未使用。知识点：未使用变量。如果有未使用的变量代码将编译失败。但也有例外，函数中声明的变量必须要使用，但可以有未使用的全局变量。函数的参数未使用也是可以的。

	如果你给未使用的变量分配了一个新值，代码也还是会编译失败。你需要在某个地方使用这个变量，才能让编译器愉快的编译。
 后面是一个匿名函数的调用，一般会声名一个函数变量，不会这么用

37. false true false
类型断言语法：i.(Type)，其中 i 是接口，Type 是类型或接口。编译时会自动检测 i 的动态类型与 Type 是否一致。但是，如果动态类型不存在，则断言总是失败

38. 参考答案及解析：问题：使用 cap() 获取 map 的容量。
	1.使用 make 创建 map 变量时可以指定第二个参数，不过会被忽略。
	2.cap() 函数适用于数组、数组指针、slice 和 channel，不适用于 map，可以使用 len() 返回 map 的元素个数
	map变量其实就是个指针， 跟 切片 类似，for range在 对map的操作会影响原数据，k 与 value的值 是数据的拷贝，range 时，新创建了变量（隐含）
 对比
 	s := make([]string, 10)
	fmt.Println(len(s))
	s[0] = "aa"
	s[1] = "bb"
	for k, v := range s {
		fmt.Println(k, v)
		if k == 0 {
			s[1] = "mmm"
		}
	}
	
39. 参考答案及解析：nil 用于表示 interface、函数、maps、slices 和 channels 的“零值”。
	如果不指定变量的类型，编译器猜不出变量的具体类型，导致编译错误
  对比：
  buildin 类型是可以推到出来的
	func main() {
		var str = "aa"
		var a = 5
		var p func() = nil
		fmt.Printf("%T\n%T\n%T\n", str, a, p)
	}
输出：string   int    func()

40. 参考答案及解析：编译失败。
	non-name data.result on left side of :=
不能使用 短变量声明 设置结构体字段值，即 结构体成员变量不能出现在 “:=” 左边，修复代码：
	func main() {
	     var data info

	     var err error
	     data.result, err = work() //ok
	     if err != nil {
		 fmt.Println(err)
		 return
	     }

	    fmt.Println(data)   
	}

41. 参考答案及解析：34。与 rune 是 int32 的别名一样，byte 是 uint8 的别名，别名类型无序转换，可直接转换

42. 参考答案及解析：编译可以通过。知识点：常量。常量是一个简单值的标识符，在程序运行时，不会被修改的量。不像变量，常量未使用是能编译通过的

43. default , channel 为 nil,读写都会阻塞

44. 参考答案及解析：输出 {}。知识点：结构体访问控制，因为 name 首字母是小写，导致其他包不能访问，所以输出为空结构体。修复代码：
	 type People struct {
   	  Name string `json:"name"`
	 }
45. 参考答案及解析：编译错误。
	invalid character U+007E '~'
	很多语言都是采用 ~ 作为按位取反运算符，Go 里面采用的是 ^ 。按位取反之后返回一个每个 bit 位都取反的数，对于有符号的整数来说，是按照补码进行取反操作的（快速计算方法：对数 a 取反，结果为 -(a+1) ），对于无符号整数来说就是按位取反。例如：
	func main() {
	    var a int8 = 3
	    var b uint8 = 3
	    var c int8 = -3

	    fmt.Printf("^%b=%b %d\n", a, ^a, ^a) // ^11=-100 -4
	    fmt.Printf("^%b=%b %d\n", b, ^b, ^b) // ^11=11111100 252
	    fmt.Printf("^%b=%b %d\n", c, ^c, ^c) // ^-11=10 2
	}
	另外需要注意的是，如果作为二元运算符，^ 表示按位异或，即：对应位相同为 0，相异为 1。例如：
	func main() {
	    var a int8 = 3
	    var c int8 = 5

	    fmt.Printf("a: %08b\n",a)
	    fmt.Printf("c: %08b\n",c)
	    fmt.Printf("a^c: %08b\n",a ^ c)
	}

	给大家重点介绍下这个操作符 &^，按位置零，例如：z = x &^ y，表示如果 y 中的 bit 位为 1，则 z 对应 bit 位为 0，否则 z 对应 bit 位等于 x 中相应的 bit 位的值。

	不知道大家发现没有，我们还可以这样理解或操作符 | ，表达式 z = x | y，如果 y 中的 bit 位为 1，则 z 对应 bit 位为 1，否则 z 对应 bit 位等于 x 中相应的 bit 位的值，与 &^ 完全相反。

	var x uint8 = 214
	var y uint8 = 92
	fmt.Printf("x: %08b\n",x)     
	fmt.Printf("y: %08b\n",y)       
	fmt.Printf("x | y: %08b\n",x | y)     
	fmt.Printf("x &^ y: %08b\n",x &^ y)

	输出：

	x: 11010110
	y: 01011100
	x | y: 11011110
	x &^ y: 10000010

46. 参考答案及解析：B。调用 foo() 函数时虽然是传值，但 foo() 函数中，字段 ls 依旧可以看成是指向底层数组的指针

47. 参考答案及解析：false true。Go 语言的 switch 语句虽然没有"break"，但如果 case 完成程序会默认 break，可以在 case 语句后面加上关键字 fallthrough，这样就会接着走下一个 case 语句（不用匹配后续条件表达式）。或者，利用 case 可以匹配多个值的特性

 修复代码
 func main() {
     isMatch := func(i int) bool {
         switch(i) {
         case 1:
             fallthrough
         case 2:
             return true
         }
         return false
    }

    fmt.Println(isMatch(1))     // true
    fmt.Println(isMatch(2))     // true

    match := func(i int) bool {
        switch(i) {
        case 1,2:
            return true
        }
        return false
    }

    fmt.Println(match(1))       // true
    fmt.Println(match(2))       // true
}

48. 函数只能与 nil 比较

49. 编译错误，map中的 T 尚未初始化，map 的value 是 struct,slice等时，一定要一层一层初始化

50. 参考答案及解析：X{} 是不可寻址的，不能直接调用方法。知识点：在方法中，指针类型的接收者必须是合法指针（包括 nil）,或能获取实例地址
修复代码：

	func main() {

	    var a *X
	    a.test()    // 相当于 test(nil)

	    var x = X{}
	    x.test()
	}
对比：直接返回的 T{} 不可寻址
	type T struct {
	     n int
	 }

	 func (t *T) Set(n int) {
	     t.n = n
	 }

	 func getT() T {
	    return T{}
	}

	func main() {
	    getT().Set(1)
	}
	
